// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  role      Role      @default(BASIC)
  posts     Post[]    @relation("WrittenPosts")
  comments  Comment[]
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt

  @@unique([name, email])
  @@index([email])
  @@map("users")
}

model Post {
  id            String     @id @default(uuid())
  title         String
  content       String
  published     Boolean    @default(false)
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String
  averageRating Float
  categories    Category[]
  Comment       Comment[]
  Tag           Tag[]
  updatedAt     DateTime   @updatedAt
  createdAt     DateTime   @default(now())

  @@map("posts")
}

model Category {
  id       String     @id @default(uuid())
  name     String     @unique
  parent   Category?  @relation(name: "CategoryHierarchy", fields: [parentId], references: [id])
  parentId String?
  children Category[] @relation("CategoryHierarchy")
  posts    Post[]

  @@map("categories")
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

enum Role {
  BASIC
  EDITOR
  ADMIN
}
